# A Modified version of https://github.com/VoronDesign/VoronUsers/tree/master/printer_mods/Ellis/Bed_Fans
# Thanks to Burst for assisting with code and testing.


[gcode_macro _BEDFANVARS]
variable_bedfantripon: 90                                                                         ; Lowest bed temperature target that will enable the bed fans
variable_bedfansenabled: 0                                                                        ; Flag to indicate fans are enabled
variable_bedfanchambertarget: 50                                                                  ; The target temperature for the chamber
variable_bedfanchambersafety: 3                                                                   ; Max temp (in C) over target before fans turn off for safety
variable_bedfanlowestspin: 0.10                                                                   ; The lowest value where the bed fans still spin at
variable_bedfanmin: 0.10                                                                          ; The low fan speed
variable_bedfanmax: 0.60                                                                          ; The high fan speed
variable_bedfannormal: 0.18                                                                       ; This should be just below where your bed fan gives stable temp
variable_outboardbedfan: 0.18                                                                     ; Static speed for outboard bed fans to assist the center fans acheive a stable temp, used during colder months
variable_bedreached: 0                                                                            ; Macro internal use
variable_last_temp: 27                                                                            ; Macro internal use

gcode:
    M117 Happy printing.

#.................................................................................................................
[gcode_macro BEDFANSOFF]
gcode:
    SET_FAN_SPEED FAN=BedFan1 SPEED=0                                                             ; Turn off left outboard bed fan
    SET_FAN_SPEED FAN=BedFan2 SPEED=0                                                             ; Turn off bed fans
    SET_FAN_SPEED FAN=BedFan3 SPEED=0                                                             ; Turn off bed fans
    SET_FAN_SPEED FAN=BedFan4 SPEED=0                                                             ; Turn off right outboard bed fan    
    SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=bedfansenabled VALUE=0                          ; Set bed fans enabled flag to 0
    SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=bedreached VALUE=0                              ; Set bed reached target flag to 0
    M118 Bed fans turned off.

#.................................................................................................................
[gcode_macro BEDFANSFAST]
gcode:
    {% set fan_max = printer["gcode_macro _BEDFANVARS"].bedfanmax|float %}                        ; Set bed fan max limit speed
    SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=bedfansenabled VALUE=1                          ; Set bed fans enabled flag to 1
    SET_FAN_SPEED FAN=BedFan2 SPEED={fan_max} 
    SET_FAN_SPEED FAN=BedFan3 SPEED={fan_max} 
    # M118 Bed fans set to maximum speed.

#.................................................................................................................
[gcode_macro BEDFANSNORMAL]
gcode:
    {% set fan_normal = printer["gcode_macro _BEDFANVARS"].bedfannormal|float %}                  ; Set bed fan normal speed
    SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=bedfansenabled VALUE=1                          ; Set bed fans enabled flag to 1
    SET_FAN_SPEED FAN=BedFan2 SPEED={fan_normal} 
    SET_FAN_SPEED FAN=BedFan3 SPEED={fan_normal} 
    # M118 Bed fans set to normal speed.

#.................................................................................................................
[gcode_macro BEDFANSSLOW]
gcode:
    {% set fan_min = printer["gcode_macro _BEDFANVARS"].bedfanmin|float %}                        ; Set bed fan min limit speed
    {% set outboard_fan = printer["gcode_macro _BEDFANVARS"].outboardbedfan|float %}              ; Set outboard bed fan speed    
    SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=bedfansenabled VALUE=1                          ; Set bed fans enabled flag to 1
    SET_FAN_SPEED FAN=BedFan2 SPEED={fan_min} 
    SET_FAN_SPEED FAN=BedFan3 SPEED={fan_min} 
    SET_FAN_SPEED FAN=BedFan1 SPEED={outboard_fan}                                                ; Activate left outboard bed fan
    SET_FAN_SPEED FAN=BedFan4 SPEED={outboard_fan}                                                ; Activate right outboard bed fan       
    # M118 Bed fans set to minimum speed.

#.................................................................................................................
[gcode_macro BEDFANSON]
gcode:
    {% set outboard_fan = printer["gcode_macro _BEDFANVARS"].outboardbedfan|float %}              ; Set outboard bed fan speed
    SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=bedfansenabled VALUE=1                          ; Set bed fans enabled flag to 1
    SET_FAN_SPEED FAN=BedFan1 SPEED={outboard_fan}                                                ; Activate left outboard bed fan
    SET_FAN_SPEED FAN=BedFan4 SPEED={outboard_fan}                                                ; Activate right outboard bed fan    
    UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1                                                 ; Start delayed-gcode chamber monitoring macro
    M118 Bed fans enabled.

#.................................................................................................................
[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
    BEDFANSOFF                                                                                    ; Turn off bed fans
    _TURN_OFF_HEATERS                                                                             ; Turn off heaters
    M118 Heaters have been turned off.



#.................................................................................................................
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
    {% set HEATER = params.HEATER|default("None") %}                                              ; Heater to set temperature for
    {% set TARGET = params.TARGET|default(0)|float %}                                             ; Target temperature
    {% set bedfantripon = printer["gcode_macro _BEDFANVARS"].bedfantripon|float %}                ; Bed temp threshold for bed fans 

    {% if HEATER|lower == "heater_bed" %}                                                         ; If heater is bed
        M99140 S{ TARGET }                                                                        ; Set bed temperature
    {% else %}                                                                                    ; If heater is not bed
        _SET_HEATER_TEMPERATURE {rawparams}                                                       ; Set heater temperature
    {% endif %}                                                                                   ; End if heater is bed

    {% if HEATER|lower == "heater_bed" %}                                                         ; If heater is bed
        {% if TARGET >= bedfantripon %}                                                           ; If the bed's target temp is above the bed fan trip threshold
            BEDFANSSLOW                                                                           ; Set bed fans to slow speed as the bed is heating
            UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1                                         ; Start delayed-gcode chamber monitoring macro
        {% else %}                                                                                ; If the bed's target temp is below the bed fan trip threshold
            BEDFANSOFF                                                                            ; Turn off bed fans
        {% endif %}                                                                               ; End if the bed's target temp is above the bed fan trip threshold
    {% endif %}                                                                                   ; End if heater is bed



#.................................................................................................................
[gcode_macro M190]
rename_existing: M99190
gcode:
    {% set S = params.S|int %}                                                                    ; Bed target temperature
    {% set bedfantripon = printer["gcode_macro _BEDFANVARS"].bedfantripon|int %}                  ; Grab the bed fan trip threshold

    {% if S >= bedfantripon %}                                                                    ; If the bed target temp is above the bed fan trip threshold
        BEDFANSSLOW                                                                               ; Set bed fans to low-speed fans while the bed is heating
    {% else %}                                                                                    ; If the bed target temp is below the bed fan trip threshold
        BEDFANSOFF                                                                                ; Turn off bed fans
    {% endif %}                                                                                   ; End if the bed target temp is above the bed fan trip threshold

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}                               ; Set bed target temp
  
    {% if S != 0 %}                                                                               ; If the bed target temp is not 0
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={ S|int } MAXIMUM={ S|int + 5 }                ; Wait for bed temp within 5 degrees
    {% endif %}                                                                                   ; End if bed target temp is not 0

    # Post-heating fan speeds
    {% if S >= bedfantripon %}                                                                    ; If the target temp is at or above the trip temperature
        BEDFANSFAST						                                                          ; Set bedfans to fast speed
        _CHAMBER_HEAT_WAIT                                                                        ; Wait for the chamber to come up to temp
    {% endif %}



#.................................................................................................................
[gcode_macro _CHAMBER_HEAT_WAIT]
description: Chamber heating cycle waiting routine
gcode:
        STATUS_HEATING                                                                            ; Set status to heating
        SET_NOZZLE_LEDS_ON                                                                        ; Turn on nozzle LEDs
        {% for i in range(0, 60) %}                                                               ; Loop for each 0.25 minutes, 60 = 15 minutes
            _WAIT_CHECK                                                                           ; Perfrom wait-check to keep values fresh
        {% endfor %}                                                                              ; End minute loop
        STATUS_READY                                                                              ; Set status to ready
    BEDFANSNORMAL                                                                                 ; Set bedfans to normal speed
    M117 Chamber currently at {printer["temperature_sensor Chamber"].temperature}C                ; Display message
    # M118 Bedfan speed set to normal, starting bedfan control loop.
    UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1                                                 ; Start delayed-gcode chamber monitoring macro

[gcode_macro _WAIT_CHECK]
gcode:
    M117 Heating Chamber, please wait. {(printer["gcode_macro _BEDFANVARS"].bedfanchambertarget * 0.98)}/{printer["temperature_sensor Chamber"].temperature} ; Display message
    {% if printer["temperature_sensor Chamber"].temperature <  (printer["gcode_macro _BEDFANVARS"].bedfanchambertarget * 0.98) %} ; Check if Chamber is at least 98% of Target
        {% for s in range(0, 15) %}                                                               ; Loop for each second
            G4 P1000                                                                              ; Wait 1 second
        {% endfor %}                                                                              ; End second loop
    {% else %}
        M117 Chamber at target temperature, quitting wait cycle.    
    {% endif %}



#.................................................................................................................
[gcode_macro M140]
rename_existing: M99140
gcode:
    {% set S = params.S|float %}                                                                  ; Bed target temperature
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}                                           ; Set bed target temp



#.................................................................................................................
[gcode_macro M141]
description: Set/Change Enclosure temp macro
gcode:
    {% set defaultENCLOSURE = printer["gcode_macro _BEDFANVARS"].bedfanchambertarget %}           ; Set default enclosure temperature
    {% set S = params.S|default(defaultENCLOSURE)|float %}                                        ; Set S to the value of S or default if not specified
    SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=bedfanchambertarget VALUE={S}                   ; Set target temp
    BEDFANSON                                                                                     ; Make sure bedfan delayed macro is running
    M118 Enclosure temperature set to {S}c                                                        ; Display the temperature set



#.................................................................................................................
[delayed_gcode bedfanloop]
gcode:
    # Get all necessary variables at the start
    {% set V = printer["gcode_macro _BEDFANVARS"] %}
    
    {% if V.bedfansenabled|int == 1 %}
        # Get sensor and target values
        {% set chamber_temp = printer["temperature_sensor Chamber"].temperature %}
        {% set chamber_target = V.bedfanchambertarget|float %}
        {% set chamber_safety_offset = V.bedfanchambersafety|float %}

        # --- SAFETY OVERRIDE CHECK ---
        # If chamber temperature exceeds target + safety offset, turn fans off and stop the loop.
        {% if chamber_temp > (chamber_target + chamber_safety_offset) %}
            M118 Chamber safety triggered: {chamber_temp|round(1)}C > {(chamber_target + chamber_safety_offset)|round(1)}C. Turning fans off.
            BEDFANSOFF
        
        {% else %}
            # --- NORMAL OPERATION ---
            # Only run the control logic if the bed heater is set high enough
            {% if printer.heater_bed.target >= V.bedfantripon %}
            
                # Check if bed has reached temp for the first time
                {% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 2) and V.bedreached == 0 %}
                    SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=bedreached VALUE=1
                {% endif %}

                # Once the bed is at temperature, start controlling the chamber temp
                {% if V.bedreached == 1 %}
                    {% set bedfanmin = V.bedfanmin|float %}
                    {% set bedfanmax = V.bedfanmax|float %}
                    {% set bedfanlowestspin = V.bedfanlowestspin|float %}
                    {% set bedfannormal = V.bedfannormal|float %}
                    
                    {% set high_threshold = 1.08 %}
                    {% set low_threshold = 0.93 %}
                    
                    {% set previous_speed = printer['fan_generic BedFan2'].speed %}
                    
                    # If coming out of max speed, reset speed to prevent overshoot
                    {% if previous_speed == bedfanmax and chamber_temp > (chamber_target * low_threshold) %}
                        {% set previous_speed = (bedfannormal * 0.95) %}
                    {% endif %}

                    # Proportional control: Adjust fan speed based on temp error
                    {% set fan_speed = (previous_speed * (1 - ((chamber_temp - chamber_target) / chamber_target) / 2))|float %}

                    # Anti-oscillation: Hold fan speed steady as temp approaches target
                    {% if chamber_temp > V.last_temp and chamber_temp < chamber_target %} {% set fan_speed = previous_speed %} {% endif %}
                    {% if chamber_temp < V.last_temp and chamber_temp > chamber_target %} {% set fan_speed = previous_speed %} {% endif %}

                    # Threshold overrides: Force min/max speed if temp is far from target
                    {% if chamber_temp > (chamber_target * high_threshold) %} {% set fan_speed = bedfanmin %} {% endif %}
                    {% if chamber_temp < (chamber_target * low_threshold) %} {% set fan_speed = bedfanmax %} {% endif %}

                    # Clamp fan speed to defined limits and set speed
                    {% set final_speed = ([([bedfanmax, fan_speed]|min), bedfanlowestspin]|max) %}
                    SET_FAN_SPEED FAN=BedFan2 SPEED={final_speed}
                    SET_FAN_SPEED FAN=BedFan3 SPEED={final_speed}

                    # Auto-tune normal speed, but only if not at the limits
                    {% if final_speed > bedfanlowestspin and final_speed < bedfanmax %}
                        SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=bedfannormal VALUE={((bedfannormal + final_speed) / 2)}
                    {% endif %}

                    # Save current temperature for the next loop's anti-oscillation check
                    SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=last_temp VALUE={chamber_temp}
                {% endif %}
            {% endif %}

            # Schedule the next run
            UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=10
        {% endif %}
    {% else %}
        # If fans are not enabled, ensure the loop is stopped.
        UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0
    {% endif %}
