#.................................................................................................................
# Full credit to this macro belongs to 'Mental', this origin can be found at the following forum link:
#   https://klipper.discourse.group/t/example-search-printer-objects/164
#.................................................................................................................
# SEARCH_VARS / Usage: SEARCH_VARS, SEARCH_VARS S=SEARCHTWORD
#   This macro will allow you to type SEARCH_VARS S={some word} from the terminal and it will respond with all of
#   the matching items in the printer object. Additionally, omitting the “s” parameter will just dump out literally
#   everything and probably catch fire. You have been warned.
#.................................................................................................................

[gcode_macro SEARCH_VARS]
gcode:
    {% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}      ; Check if printing or paused
        {action_respond_info("Cannot do that while printing")}                               ; If so, respond with error
    {% else %}                                                                               ; If not, continue

    {% set search = params.S|lower %}                                               ; Set the search word to lower case
    {% set ns = namespace() %}                                                      ; Create a namespace for the path
    {% for item in printer  %}                                                      ; Loop through the printer object
        {% if ' ' in item %}                                                        ; If the item has a space in it, wrap it in quotes
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}                  ; Set the path to the item
        {% else %}                                                                  ; Otherwise, just set the path to the item
            {% set ns.path = ['printer.', item, ''] %}                              ; Set the path to the item
        {% endif %}                                                                 ; End if

        {% if search in ns.path|lower %}                                            ; If the search word is in the path, respond with the path
            { action_respond_info(ns.path|join) }                                   ; Respond with the path
        {% endif %}                                                                 ; End if

        {% if printer[item].items() %}                                              ; If the item has children, loop through them
            {% for childkey, child in printer[item].items() recursive %}            ; Loop through the children
                {% set ns.path = ns.path[:loop.depth|int + 1] %}                    ; Set the path to the current depth

                {% if ' ' in childkey %}                                            ; If the child key has a space in it, wrap it in quotes
                    {% set null = ns.path.append("['%s']" % (childkey)) %}          ; Append the child key to the path
                {% else %}                                                          ; Otherwise, just append the child key to the path
                    {% set null = ns.path.append(".%s" % (childkey)) %}             ; Append the child key to the path
                {% endif %}                                                         ; End if

                {% if child is mapping  %}                                          ; If the child is a mapping, loop through it
                    { loop(child.items()) }                                         ; Loop through the child
                {% else %}                                                          ; Otherwise, respond with the path and child
                    {% if search in ns.path|lower %}                                ; If the search word is in the path, respond with the path and child
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }  ; Respond with the path and child
                    {% endif %}                                                     ; End if
                {% endif %}                                                         ; End if
                
            {% endfor %}                                                            ; End for
        {% endif %}                                                                 ; End if
    {% endfor %}                                                                    ; End for

    {% endif %}                                                                     ; End if printing check